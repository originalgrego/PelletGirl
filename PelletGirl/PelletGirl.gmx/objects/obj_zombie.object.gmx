<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_green_zombie</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keep a reference to the cage for reporting death
cage = instance_find(obj_cage, 0);

//Use a bit mask to store available moves
moveMask = 15;

//Create a constant for each direction, powers of 2 are used to target 
//separate bits in the mask
//TODO: these should be declared in the default configuration of the game macros 
MOVE_R = 1;
MOVE_L = 2;
MOVE_U = 4;
MOVE_D = 8;

//When set do not change directions due to new opportunities in the move mask
ignoreMoveMaskChange = false;

//Whether this zombie is smart and follows pellet girl
smart = false;

//The starting sprite of this zombie, used to restore the zombie's sprite 
//after superMode
originalSprite = sprite_index;

//Whether this zombie is currently scared
inScaredMode = false;

//The type of the zombie, used to notify the cage of a dead zombie
zombieType = GREEN_ZOMBIE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//When the zombie has died remove the zombie from the livingZombies mask of the cage
var zombieType = self.zombieType;
with(cage) {
    livingZombies &amp;= ~zombieType;
    alarm[0] = 180;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ignoreMoveMaskChange = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//When changing to or from superMode immediately decide a new direction
if (!inScaredMode &amp;&amp; global.superMode) {
    zombie_decide_direction();
    sprite_index = spr_scared_zombie;
    image_speed = 0.25;
    inScaredMode = true;
} else if (inScaredMode &amp;&amp; !global.superMode) {
    zombie_decide_direction();
    sprite_index = originalSprite;
    image_speed = 1;
    inScaredMode = false;
}

var oldMask = moveMask;

update_move_mask();

//If we are not ignoring move mask changes, then decide a new direction if we have a new
//movement opportunity, then ignore move mask changes for several frames.  Avoids
//the zombie constantly changing directions due to new movement opportunities.
if (!ignoreMoveMaskChange &amp;&amp; moveMask != oldMask) {
    zombie_decide_direction();
    alarm[1] = 3;
    ignoreMoveMaskChange = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall_base">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>placeholder</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zombie_decide_direction();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the zombie, then draw eyes depending on the direction its heading 
draw_self();

if (!global.superMode) {
    var eyeType = spr_zombie_eye_left;
    
    if (hspeed &gt; 0) {
      eyeType = spr_zombie_eye_right;
    } else if (vspeed &lt; 0) {
      eyeType = spr_zombie_eye_up;
    } else if (vspeed &gt; 0) {
      eyeType = spr_zombie_eye_down;
    }

    draw_sprite(eyeType, 0, x - 9 + 3, y - 9 + 4);
    draw_sprite(eyeType, 0, x - 9 + 9, y - 9 + 4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,7</point>
    <point>7,7</point>
  </PhysicsShapePoints>
</object>
