<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cage</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_wall_base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cage_spawn_zombie(obj_red_zombie);

//Store the sprites from the zombies
pinkSprite = object_get_sprite(obj_zombie);
redSprite = object_get_sprite(obj_red_zombie);
orangeSprite = object_get_sprite(obj_orange_zombie);
blueSprite = object_get_sprite(obj_blue_zombie);

//Initiate the living zombies bit map
livingZombies = RED_ZOMBIE;

//Calculate the x positions of the zombiess in the cage
cagedXs[0] = x + (sprite_width * 0.25) - 1;
cagedXs[1] = x + (sprite_width * 0.5);
cagedXs[2] = x + (sprite_width * 0.75) + 1;

//Keep a reference to the base y value of the caged zombies
cagedStartY = y + (sprite_height * 0.5);

//Initialize the y positions of the zombiess in the cage
cagedY[0] = cagedStartY;
cagedY[1] = cagedStartY;
cagedY[2] = cagedStartY;

//Initialize the delta Y positions for moving the zombies in the cage
cagedDeltaY[0] = -0.5;
cagedDeltaY[1] = 0.5;
cagedDeltaY[2] = -0.5;

alarm[0] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cage_spawn_dead_zombie();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Move the positions of the zombies in the cage, change the direction of the delta
//if they have moved more than 2 pixels from the start y position

cagedY[0] += cagedDeltaY[0];
if (abs(cagedY[0] - cagedStartY) &gt; 2) {
    cagedDeltaY[0] = -cagedDeltaY[0];
}
cagedY[1] += cagedDeltaY[1];
if (abs(cagedY[1] - cagedStartY) &gt; 2) {
    cagedDeltaY[1] = -cagedDeltaY[1];
}
cagedY[2] += cagedDeltaY[2];
if (abs(cagedY[2] - cagedStartY) &gt; 2) {
    cagedDeltaY[2] = -cagedDeltaY[2];
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw the cage and then draw a zombie for each caged zombie up to 3

draw_self();

cagedNumber = 0;
if (!(livingZombies &amp; RED_ZOMBIE)) {
    draw_sprite(redSprite, 0, cagedXs[cagedNumber], cagedY[cagedNumber]);
    cagedNumber ++;
}

if (!(livingZombies &amp; BLUE_ZOMBIE)) {
    draw_sprite(blueSprite, 0, cagedXs[cagedNumber], cagedY[cagedNumber]);
    cagedNumber ++;
}

if (!(livingZombies &amp; ORANGE_ZOMBIE)) {
    draw_sprite(orangeSprite, 0, cagedXs[cagedNumber], cagedY[cagedNumber]);
    cagedNumber ++;
}

//Only need to check if there are already 3 zombies in the cage here, as we 
//could have only drawn three zombies
if (!(livingZombies &amp; GREEN_ZOMBIE) &amp;&amp; cagedNumber &lt; 3) {
    draw_sprite(pinkSprite, 0, cagedXs[cagedNumber], cagedY[cagedNumber]);
    cagedNumber ++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
